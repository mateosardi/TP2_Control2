% Item 7
% 
% Calcular un controlador que haga evolucionar al péndulo en el equilibrio estable, partiendo
% de una condición inicial nula en el desplazamiento y el ángulo en pi que termine en 10 metros evitando
% las oscilaciones de la masa m, considerando que es una grúa. Una vez que delta=10 modificar a m a un
% valor 10 veces mayor y volver al origen evitando oscilaciones. 

clc;clear all;close all

% Declaración de constantes
m = 1; % Se multiplico por 10 la masa
Fricc = 0.1; long = 0.6; g = 9.8; M = 0.5;
t_etapa = 1e-3; tF = 60;
t=0:t_etapa:tF;
tiempo = round(tF/t_etapa);

ent=5*square(2*pi*t/60)+5; %referencia



% Condidiones iniciales
% x = [delta(i); delta_p(i); fi(i); fi_p(i)]
x0 = [0 0 pi 0];
delta(1)=0;
delta_p(1)=0;
fi(1)=pi;
fi_p(1) = 0;
dseta(1)=0;
u(1) = 0;

% Al agregar un integrador, se amplian las matrices
AA=[0 1 0 0 0;0 -Fricc/M -m*g/M 0 0; 0 0 0 1 0; 0 -Fricc/(long*M) -g*(m+M)/(long*M) 0 0;-1 0 0 0 0];
BB=[0; 1/M; 0; 1/(long*M); 0];
CC=[1 0 0 0 0];
C = [1 0 0 0];

% LQR
QQ=1*diag([.000005    20    5   0.0001    0.05]);  RR=130; %por iteracion 
% QQ=1*diag([.000005    20    5    0.0001    0.0045]);  RR=130; %por iteracion 
% Ganancia de realimentación
KK = lqr(AA, BB, QQ, RR);

fi_pp = 0;

for i=1:1:tiempo
x=[delta(i); delta_p(i); fi(i); fi_p(i); dseta(i)];

dseta_p = ent(i) - CC(1:4)*x(1:4);
dseta(i+1) = dseta(i) + t_etapa*dseta_p;

u(i+1)=-KK(1:4)*x(1:4)-KK(5)*dseta(i);

% Ecuaciones diferenciales
delta_pp = 1/(M+m) *(-m*long*fi_pp*cos(fi(i))+m*long*(fi_p(i))^2*sin(fi(i))+Fricc*delta_p(i)+u(i));
fi_pp = (1/long)* (g*sin(fi(i))-delta_pp*cos(fi(i)));

delta_p(i+1) = delta_p(i)+t_etapa*delta_pp;
delta(i+1) = delta(i) + t_etapa*delta_p(i);
fi_p(i+1) = fi_p(i) + t_etapa*fi_pp;
fi(i+1) = fi(i) + t_etapa*fi_p(i);
end

figure
plot(t,0*t+pi,'b');
hold on;
grid on;
subplot(2,1,1);
plot(t,delta,'r');
title('Desplazamiento grua');
xlabel('Tiempo');
ylabel('Delta');

subplot(2,1,2);
plot(t,fi,'r');
axis([0 tF 0 5])
title('Angulo vertical');
xlabel('Tiempo');
ylabel('Ángulo');
